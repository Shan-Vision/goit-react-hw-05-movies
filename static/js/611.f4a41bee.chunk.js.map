{"version":3,"file":"static/js/611.f4a41bee.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/GenresFilter/GenresFiltered.styled.js","components/GenresFilter/GenresFilter.jsx","pages/Home/Home.styled.js","pages/Home/Home.jsx"],"sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import styled from 'styled-components';\n\nexport const GenresList = styled.ul`\n  max-width: 1200px;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  margin: 0 auto 40px;\n`;\n\nexport const GenresItem = styled.button`\n  padding: 3px 10px;\n  font-size: 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  color: white;\n  border: none;\n  background: ${({ active }) =>\n    active\n      ? `linear-gradient(\n      45deg,\n      rgb(239, 7, 129) 0%,\n      rgb(239, 7, 129) 6%,\n      rgb(208, 10, 112) 6%,\n      rgb(208, 10, 112) 25%,\n      rgb(177, 13, 96) 25%,\n      rgb(177, 13, 96) 40%,\n      rgb(147, 16, 79) 40%,\n      rgb(147, 16, 79) 45%,\n      rgb(116, 19, 62) 45%,\n      rgb(116, 19, 62) 53%,\n      rgb(85, 22, 46) 53%,\n      rgb(85, 22, 46) 66%,\n      rgb(54, 25, 29) 66%,\n      rgb(54, 25, 29) 100%\n    )`\n      : ` linear-gradient(\n      45deg,\n      rgba(8, 211, 172, 0.45) 0%,\n      rgba(8, 211, 172, 0.45) 12.5%,\n      rgba(62, 29, 50, 0.45) 12.5%,\n      rgba(62, 29, 50, 0.45) 25%,\n      rgba(54, 55, 67, 0.45) 25%,\n      rgba(54, 55, 67, 0.45) 37.5%,\n      rgba(47, 81, 85, 0.45) 37.5%,\n      rgba(47, 81, 85, 0.45) 50%,\n      rgba(23, 159, 137, 0.45) 50%,\n      rgba(23, 159, 137, 0.45) 62.5%,\n      rgba(16, 185, 155, 0.45) 62.5%,\n      rgba(16, 185, 155, 0.45) 75%,\n      rgba(31, 133, 120, 0.45) 75%,\n      rgba(31, 133, 120, 0.45) 87.5%,\n      rgba(39, 107, 102, 0.45) 87.5%,\n      rgba(39, 107, 102, 0.45) 100%\n    ),\n    linear-gradient(135deg, rgb(87, 116, 221), rgb(35, 4, 229))`};\n\n  :hover,\n  :focus-visible {\n    background: linear-gradient(\n      45deg,\n      rgb(239, 7, 129) 0%,\n      rgb(239, 7, 129) 6%,\n      rgb(208, 10, 112) 6%,\n      rgb(208, 10, 112) 25%,\n      rgb(177, 13, 96) 25%,\n      rgb(177, 13, 96) 40%,\n      rgb(147, 16, 79) 40%,\n      rgb(147, 16, 79) 45%,\n      rgb(116, 19, 62) 45%,\n      rgb(116, 19, 62) 53%,\n      rgb(85, 22, 46) 53%,\n      rgb(85, 22, 46) 66%,\n      rgb(54, 25, 29) 66%,\n      rgb(54, 25, 29) 100%\n    );\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { getAllGenres } from 'service/FetchMovies';\nimport { GenresList, GenresItem } from './GenresFiltered.styled';\n\nconst GenresFilter = ({ onClick, selected }) => {\n  const [genres, setGenres] = useState(null);\n  const genreName = selected.map(({ name }) => name);\n\n  useEffect(() => {\n    getAllGenres().then(setGenres);\n  }, []);\n\n  return (\n    <GenresList>\n      {genres?.map(genre => {\n        const currentGenre = genreName.includes(genre.name);\n        return (\n          <li key={genre.id}>\n            <GenresItem\n              type=\"button\"\n              active={currentGenre}\n              onClick={() => onClick(genre)}\n            >\n              {genre.name}\n            </GenresItem>\n          </li>\n        );\n      })}\n    </GenresList>\n  );\n};\n\nexport default GenresFilter;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Section = styled.section``;\n\nexport const Title = styled.h1`\n  margin-bottom: 30px;\n  font-size: 40px;\n  color: rgb(153, 156, 159);\n`;\n\nexport const MovieCardList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 24px;\n  padding: 0 10px;\n`;\nexport const MovieCard = styled.li`\n  max-width: 250px;\n  border-radius: 4px;\n`;\n\nexport const Image = styled.img`\n  border-radius: 4px;\n  margin-bottom: 10px;\n`;\nexport const CardBox = styled.div`\n  height: 36px;\n  display: flex;\n  align-items: baseline;\n  gap: 15px;\n  padding-left: 8px;\n`;\n\nexport const CardTitle = styled.h5`\n  color: rgb(153, 156, 159);\n`;\n\nexport const LinkElem = styled(NavLink)`\n  width: 100%;\n  height: 100%;\n  border-radius: 4px;\n  :hover ${Image}, :focus ${Image} {\n    box-shadow: 0 4px 4px #3bd9d9, 0 1px 6px #3bd9d9, 0 8px 8px #b527b5,\n      0 16px 16px #b527b5, 8px 32px 32px #b527b5;\n  }\n  :hover ${CardTitle}, :focus ${CardTitle} {\n    color: #3bd9d9;\n  }\n`;\n","import GenresFilter from 'components/GenresFilter';\nimport { useEffect, useState } from 'react';\nimport { Outlet, useLocation } from 'react-router-dom';\nimport { getPopularMovies, getGenreListById } from 'service/FetchMovies';\nimport {\n  Title,\n  MovieCardList,\n  MovieCard,\n  CardBox,\n  CardTitle,\n  LinkElem,\n  Image,\n  Section,\n} from './Home.styled';\n\nconst Home = () => {\n  const [movies, setMovies] = useState(null);\n  const [activeGenre, setActiveGenre] = useState([]);\n  const location = useLocation();\n  const IMAGE_URL = 'https://image.tmdb.org/t/p/w300';\n\n  useEffect(() => {\n    getPopularMovies()\n      .then(setMovies)\n      .catch(error => console.log(error));\n  }, []);\n\n  useEffect(() => {\n    const genresId = activeGenre.map(({ id }) => id.toString());\n    getGenreListById(genresId).then(setMovies);\n  }, [activeGenre]);\n\n  const handleSelectGenre = genre => {\n    const { name } = genre;\n    const GenreSelectedName = activeGenre.map(({ name }) => name);\n    if (GenreSelectedName.includes(name)) {\n      const ToggleSelectedGenre = activeGenre.filter(\n        genre => genre.name !== name\n      );\n      setActiveGenre(ToggleSelectedGenre);\n      return;\n    }\n    setActiveGenre(activeGerne => [...activeGenre, genre]);\n  };\nconsole.log('activeGenre :>> ', activeGenre);\n  return (\n    <main>\n      <Section>\n        <Title>Trending today</Title>\n        <GenresFilter onClick={handleSelectGenre} selected={activeGenre} />\n\n        <MovieCardList>\n          {movies &&\n            movies.map(({ id, title, name, poster_path }) => (\n              <MovieCard key={id}>\n                <LinkElem to={`/movies/${id}`} state={{ from: location }}>\n                  <Image src={`${IMAGE_URL}${poster_path}`} alt=\"Movie Card\" />\n                  <CardBox>\n                    <CardTitle>{title || name}</CardTitle>\n                  </CardBox>\n                </LinkElem>\n              </MovieCard>\n            ))}\n        </MovieCardList>\n        <Outlet />\n      </Section>\n    </main>\n  );\n};\n\nexport default Home;\n"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","GenresList","styled","GenresItem","active","onClick","selected","useState","genres","setGenres","genreName","map","name","useEffect","getAllGenres","then","genre","currentGenre","includes","type","id","Section","Title","MovieCardList","MovieCard","Image","CardBox","CardTitle","LinkElem","NavLink","movies","setMovies","activeGenre","setActiveGenre","location","useLocation","getPopularMovies","catch","error","console","log","genresId","toString","getGenreListById","ToggleSelectedGenre","filter","activeGerne","title","poster_path","to","state","src","alt"],"sourceRoot":""}